pipeline {
    agent any

    environment {
        IMAGE_NAME = 'devops317/mynodejs-application'
        GIT_REPO = 'https://github.com/ShahzaibInnovation/mynodejs-application.git'
        SONAR_URL = "http://192.168.43.90:9000"
        SONAR_SCANNER_PATH = '/opt/sonar-scanner/bin' // Path to SonarScanner
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Unit Test') {
            steps {
                sh 'npm test'
            }
        }

        stage('Static Code Analysis (SonarQube)') {
            steps {
                script {
                    // Update PATH for SonarScanner
                    env.PATH = "${SONAR_SCANNER_PATH}:${env.PATH}"

                    withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            sonar-scanner \
                            -Dsonar.projectKey=my-nodejs-app \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_URL} \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PWD')]) {
                        sh 'echo $DOCKER_PWD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh "docker push ${IMAGE_NAME}:${BUILD_NUMBER}"
                    }
                }
            }
        }
    }

    post {
        always {
            sh "docker rmi ${IMAGE_NAME}:${BUILD_NUMBER} || true"
        }
        success {
            echo 'Build succeeded and image pushed to Docker Hub!'
        }
        failure {
            echo 'Build failed. Please check the logs.'
        }
    }
}
