pipeline {
    agent any

    environment {
        // Docker image name
        IMAGE_NAME = 'devops317/mynodejs-application'
        // Your GitHub repository URL
        GIT_REPO = 'https://github.com/ShahzaibInnovation/mynodejs-application.git'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the GitHub repository
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Install Dependencies') {
            steps {
                // Install Node.js dependencies
                sh 'npm install'
            }
        }

        stage('Unit Test') {
            steps {
                // Run unit tests using Mocha or any testing framework
                sh 'npm test'
            }
        }

        stage('Static Code Analysis (SonarQube)') {
            steps {
                // Run SonarQube analysis
                script {
                    withSonarQubeEnv('SonarQube') { // 'SonarQube' should match the name of your SonarQube server configuration in Jenkins
                        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONARQUBE_AUTH')]) {
                            sh '''
                                sonar-scanner \
                                -Dsonar.projectKey=my-nodejs-app \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://192.168.43.90:9000 \
                                -Dsonar.login=$SONARQUBE_AUTH
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                // Build the Node.js application
                sh 'npm run build'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build Docker image for the Node.js app
                script {
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                // Use Docker Hub credentials to log in and push the image
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PWD')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh "docker push ${IMAGE_NAME}:${BUILD_NUMBER}"
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images after the build
            sh 'docker rmi ${IMAGE_NAME}:${BUILD_NUMBER} || true'
        }
        success {
            echo 'Build succeeded and image pushed to Docker Hub!'
        }
        failure {
            echo 'Build failed. Please check the logs.'
        }
    }
}
